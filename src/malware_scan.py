# malware_scan.py
# Author: William Richmond
# Date: 2024-11-17
# Class: CYBR-260-45
# Assignment: Final Project
# Description: Provides functions for scanning files for malware using ClamAV.
# Revised on:

import pyclamd
import logging
import os

# Ensure the logs directory exists
log_directory = 'logs'
if not os.path.exists(log_directory):
    os.makedirs(log_directory)

# Configure logging
logging.basicConfig(
    filename=os.path.join(log_directory, 'malware_scan.log'),
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def connect_to_clamav():
    try:
        cd = pyclamd.ClamdAgnostic()
        if cd.ping():
            logging.info("Connected to ClamAV daemon successfully.")
            return cd
        else:
            logging.error("Failed to ping ClamAV daemon.")
            return None
    except Exception as e:
        logging.error(f"Error connecting to ClamAV daemon: {e}")
        return None

def scan_file(file_path: str) -> dict:
    scan_results = {
        "file": file_path,
        "status": "unknown",
        "threat": None
    }

    if not os.path.isfile(file_path):
        logging.error(f"File not found: {file_path}")
        scan_results["status"] = "error"
        scan_results["threat"] = "File not found"
        return scan_results

    cd = connect_to_clamav()
    if cd is None:
        scan_results["status"] = "error"
        scan_results["threat"] = "ClamAV connection failed"
        return scan_results

    try:
        result = cd.scan_file(file_path)
        if result is None:
            scan_results["status"] = "clean"
        else:
            scan_results["status"] = "infected"
            scan_results["threat"] = list(result.values())[0]
        logging.info(f"Scan results for {file_path}: {scan_results}")
    except Exception as e:
        logging.error(f"Error scanning file {file_path}: {e}")
        scan_results["status"] = "error"
        scan_results["threat"] = str(e)

    return scan_results

def log_scan_results(file_path: str, scan_results: dict):
    log_message = f"File: {file_path}, Status: {scan_results['status']}, Threat: {scan_results['threat']}"
    if scan_results["status"] == "infected":
        logging.warning(log_message)
    else:
        logging.info(log_message)
