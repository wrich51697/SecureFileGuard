# test_malware_scan.py
# Author: William Richmond
# Date: 2024-11-17
# Class: CYBR-260-45
# Assignment: Final Project
# Description: Unit tests for the MalwareScanner class of SecureFileGuard.
# Revised on: 2024-12-01

import unittest
import os
from src.malware_scan import MalwareScanner

class TestMalwareScanner(unittest.TestCase):
    """Unit tests for MalwareScanner class."""

    @classmethod
    def setUpClass(cls):
        """Set up test environment and initialize the MalwareScanner instance."""
        cls.virustotal_api_key = "test_api_key"  # Use a mock or test API key
        cls.scanner = MalwareScanner()

        # Define test file paths
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        cls.clean_test_file = os.path.join(project_root, "resources", "clean_sample.txt")
        cls.infected_test_file = os.path.join(project_root, "resources", "infected_sample.txt")

        # Create a clean test file
        with open(cls.clean_test_file, 'w') as f:
            f.write("This is a clean test file.")

        # Create a mock infected test file (to be handled in tests)
        with open(cls.infected_test_file, 'w') as f:
            f.write("This is an infected test file.")

    @classmethod
    def tearDownClass(cls):
        """Clean up test environment by deleting test files."""
        os.remove(cls.clean_test_file)
        os.remove(cls.infected_test_file)

    # Function: test_scan_clean_file
    # Purpose: Tests scanning a clean file using MalwareScanner.
    # Inputs: None
    # Returns: None
    def test_scan_clean_file(self):
        """Test scanning a clean file."""
        results = self.scanner.scan_file(self.clean_test_file)
        self.assertEqual(results["status"], "clean", "Expected scan result to be clean.")
        self.assertIsNone(results["threat"], "Expected no threat for a clean file.")
        print(f"Test scan clean file results: {results}")

    # Function: test_scan_missing_file
    # Purpose: Tests handling of a missing file during scanning.
    # Inputs: None
    # Returns: None
    def test_scan_missing_file(self):
        """Test scanning a missing file."""
        missing_file = os.path.join(os.path.dirname(self.clean_test_file), "missing.txt")
        results = self.scanner.scan_file(missing_file)
        self.assertEqual(results["status"], "error", "Expected error status for missing file.")
        self.assertEqual(results["threat"], "File not found", "Expected 'File not found' threat message.")
        print(f"Test scan missing file results: {results}")

    # Function: test_scan_infected_file
    # Purpose: Tests scanning an infected file using MalwareScanner.
    # Inputs: None
    # Returns: None
    def test_scan_infected_file(self):
        """Test scanning an infected file."""
        # Mock the ClamAV or VirusTotal response if necessary
        results = self.scanner.scan_file(self.infected_test_file)
        self.assertIn(results["status"], ["clean", "infected"], "Status should be either clean or infected.")
        print(f"Test scan infected file results: {results}")

    # Function: test_hash_file
    # Purpose: Tests the hash_file method of MalwareScanner.
    # Inputs: None
    # Returns: None
    def test_hash_file(self):
        """Test hashing a file."""
        file_hash = self.scanner.hash_file(self.clean_test_file)
        self.assertIsInstance(file_hash, str, "Expected hash to be a string.")
        self.assertEqual(len(file_hash), 64, "Expected SHA-256 hash length to be 64 characters.")
        print(f"Test hash file result: {file_hash}")

if __name__ == "__main__":
    unittest.main()
